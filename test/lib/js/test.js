// Generated by CoffeeScript 1.12.1
'use strict';
var NOT_OPTIMIZED, OPTIMIZED, assert, optimize, ref, verify;

assert = require('assert');

optimize = require('../../../lib');

ref = require('../../helpers'), verify = ref.verify, OPTIMIZED = ref.OPTIMIZED, NOT_OPTIMIZED = ref.NOT_OPTIMIZED;

describe('test optimize', function() {

  verify({
    name: 'should optimize a simple function',
    fn: function() {},
    answer: OPTIMIZED
  });

  verify({
    name: 'should optimize a function with a number arg',
    fn: function(a) {
      return a / 10;
    },
    args: [100],
    answer: OPTIMIZED
  });

  verify({
    name: 'should optimize a function with a string arg',
    fn: function(s) {
      return s.toUpperCase();
    },
    args: ['test'],
    answer: OPTIMIZED
  });

  (function() {
    var other;
    other = function() {};
    verify({
      name: 'should NOT optimize a function passing arguments to another function (w/out context)',
      fn: function() {
        other.apply(this, arguments);
      },
      args: ['a', 'b'],
      answer: NOT_OPTIMIZED
    });

    verify({
      name: 'should NOT optimize a function passing arguments to another function (w/context)',
      fn: function() {
        var args;
        args = other.apply(this, arguments);
      },
      args: ['a', 'b'],
      context: {},
      answer: NOT_OPTIMIZED
    });
  })();
  
  it('should NOT optimize a function with eval (unless it\'s Node 4)', function() {
    var answer, fnEval, result;
    fnEval = function(s) {
      eval('');
    };
    answer = {
      optimized: false,
      always: false,
      maybe: false,
      TurboFan: false
    };
    if (process.versions.node[0] === '4') {
      answer.optimized = true;
      answer.TurboFan = true;
    }
    result = optimize(fnEval, ['blah']);
    return assert.deepEqual(result, answer);
  });
});
